############################################################################################
#### AWS Inter-Region Latency Monitoring - API Availability Test
# Tests that the AWS Cloudping API endpoint is accessible after a deployment.
#
# @author Matt Adorjan
# @email matt@mattadorjan.com
# @github https://github.com/mda590/cloudping-api
############################################################################################

import boto3
import urllib2

pipeline = boto3.client('codepipeline')

def putSuccess(jobId):
    """
    If the function executes sucessfully, this function sends a success signal
    back to the CodePipeline pipeline which invoked this function.
    """
    response = pipeline.put_job_success_result(
        jobId=jobId,
        currentRevision={
            'revision': 'rev1',
            'changeIdentifier': 'change1',
        }
    )

def putFailure(jobId, message):
    """
    In the event an error is created during execution, this function sends the
    error message back to the CodePipeline pipeline which invoked this function.
    """
    response = pipeline.put_job_failure_result(
        jobId=jobId,
        failureDetails={
            'type': 'JobFailed',
            'message': message
        }
    )

def lambda_handler(event, context):
    """Main function called by Lambda during execution.

    This function makes a call to 2 endpoints on the newly deployed API.
    The test ensures that both endpoints are returning the expected content.
    If the correct content is not found on the endpoint, an error will be 
    returned to the CodePipeline pipeline which invoked the function.

    Parameters
    -----------
    event : object
        All of the event payload generated by the CodePipeline.
    context : object
        Lambda context information.

    Returns
    -----------
    object
        An error message, if one is thrown.
        Otherwise, function ends by calling CodePipeline success.
    """
    # Get the current job ID for the CodePipeline job calling this function
    jobId = event['CodePipeline.job']['id']

    status = True

    # Connect to Hello API test endpoint
    response = urllib2.urlopen('https://api-demo.cloudping.co/hello')
    html = response.read()
    expected_text = 'Hello World!'

    # Verify that the expected text was returned by the API call
    if(expected_text not in html):
        status = False

    # Connect to Cloudping Averages Data endpoint (calls DynamoDB)
    response = urllib2.urlopen('https://api-demo.cloudping.co/averages')
    html = response.read()
    expected_text = '"region": "ap-south-1"'

    # Verify that the expected text was returned by the API call
    if(expected_text not in html):
        status = False

    # If the status was changed to False, meaning one of the tests failed
    # Put a failure to CodePipeline. Otherwise, return Success.
    if(status == False):
        message = 'API did not respond or values being served are not expected.'
        print message
        putFailure(jobId, message)
    else:
        print 'API tests succeeded!'
        putSuccess(jobId)
        