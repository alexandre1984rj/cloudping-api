---
swagger: "2.0"
info:
  version: "2017-01-08T23:30:50Z"
  title: Cloudping-API
  description: Records inter-region latency over a TCP connection between all AWS regions in the world.
  contact:
    name: Matt Adorjan
    email: matt@mattadorjan.com
    url: https://matt.adorjan.co
host: "api-demo.cloudping.co"
schemes:
- "https"
paths:
  /hello:
    get:
      description: Returns hello message to confirm the API is working.
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: hello response
          schema:
            items:
              $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "##  This template will pass through all path parameters\
            \ and selected context information through to the integration endpoint\
            \ via the body/payload. The message content is also included.\n#set($allParams\
            \ = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\"\
            \ : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\
            \"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\"\
            \ : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n\
            \    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" :\
            \ {\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"request-id\" : \"$context.requestId\",\n    \"\
            resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:506666621600:function:${stageVariables.LambdaFunctionName}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /averages:
    get:
      description: Returns all averages between all regions for the previous 24 hours
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        '200':
          description: response with averages
          schema:
            type: array
            items:
              $ref: '#/definitions/avg'
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "##  This template will pass through all path parameters\
            \ and selected context information through to the integration endpoint\
            \ via the body/payload. The message content is also included.\n#set($allParams\
            \ = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\"\
            \ : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\
            \"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\"\
            \ : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n\
            \    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" :\
            \ {\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"request-id\" : \"$context.requestId\",\n    \"\
            resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:506666621600:function:${stageVariables.LambdaFunctionName}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /averages/day:
    get:
      description: Returns all averages between all regions for the previous 24 hours
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: response with averages
          schema:
            $ref: '#/definitions/avg'
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "##  This template will pass through all path parameters\
            \ and selected context information through to the integration endpoint\
            \ via the body/payload. The message content is also included.\n#set($allParams\
            \ = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\"\
            \ : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\
            \"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\"\
            \ : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n\
            \    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" :\
            \ {\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"request-id\" : \"$context.requestId\",\n    \"\
            resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:506666621600:function:${stageVariables.LambdaFunctionName}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /averages/day/{numdays}:
    get:
      description: Returns all averages between all regions for the requested number of previous days.
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: numdays
        in: path
        description: Number of previous days to fetch and average
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: response with averages
          schema:
            $ref: '#/definitions/avg'
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "##  This template will pass through all path parameters\
            \ and selected context information through to the integration endpoint\
            \ via the body/payload. The message content is also included.\n#set($allParams\
            \ = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\"\
            \ : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\
            \"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\"\
            \ : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n\
            \    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" :\
            \ {\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"request-id\" : \"$context.requestId\",\n    \"\
            resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:506666621600:function:${stageVariables.LambdaFunctionName}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /averages/month:
    get:
      description: Returns all averages between all regions for the previous 1 month
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: response with averages
          schema:
            $ref: '#/definitions/avg'
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "##  This template will pass through all path parameters\
            \ and selected context information through to the integration endpoint\
            \ via the body/payload. The message content is also included.\n#set($allParams\
            \ = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\"\
            \ : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\
            \"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\"\
            \ : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n\
            \    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" :\
            \ {\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"request-id\" : \"$context.requestId\",\n    \"\
            resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:506666621600:function:${stageVariables.LambdaFunctionName}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /averages/month/{nummonths}:
    get:
      description: Returns all averages between all regions for the requested number of previous months.
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: nummonths
        in: path
        description: Number of previous months to fetch and average
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: response with averages
          schema:
            $ref: '#/definitions/avg'
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "##  This template will pass through all path parameters\
            \ and selected context information through to the integration endpoint\
            \ via the body/payload. The message content is also included.\n#set($allParams\
            \ = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\"\
            \ : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\
            \"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\"\
            \ : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n\
            \    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" :\
            \ {\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"request-id\" : \"$context.requestId\",\n    \"\
            resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:506666621600:function:${stageVariables.LambdaFunctionName}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /averages/week:
    get:
      description: Returns all averages between all regions for the previous 1 week
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: response with averages
          schema:
            $ref: '#/definitions/avg'
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "##  This template will pass through all path parameters\
            \ and selected context information through to the integration endpoint\
            \ via the body/payload. The message content is also included.\n#set($allParams\
            \ = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\"\
            \ : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\
            \"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\"\
            \ : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n\
            \    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" :\
            \ {\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"request-id\" : \"$context.requestId\",\n    \"\
            resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:506666621600:function:${stageVariables.LambdaFunctionName}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /averages/week/{numweeks}:
    get:
      description: Returns all averages between all regions for the requested number of previous weeks.
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: numweeks
        in: path
        description: Number of previous weeks to fetch and average
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: response with averages
          schema:
            $ref: '#/definitions/avg'
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "##  This template will pass through all path parameters\
            \ and selected context information through to the integration endpoint\
            \ via the body/payload. The message content is also included.\n#set($allParams\
            \ = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\"\
            \ : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\
            \"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\"\
            \ : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n\
            \    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" :\
            \ {\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"request-id\" : \"$context.requestId\",\n    \"\
            resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:506666621600:function:${stageVariables.LambdaFunctionName}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /query:
    post:
      description: Returns all averages for a specific region pair, based on query passed.
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: request
        in: body
        schema:
          $ref: '#/definitions/queryModel'
        description: regionFrom=The source region to be used in the query;
                      regionTo=The destination region to be used in the query.
                      condOpr=Whether to return data greater than the provided timestamp
                      or less than the provided timestamp.;
                      timestamp=The time which should be used as a starting point for the query.
                      This is used in conjunction with the condOpr to find results
                      either greater than or less than this timestamp.
        required: true
      responses:
        200:
          description: Response with results for specified region pair and timestamp.
          schema:
            $ref: '#/definitions/queryResponseModel'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "##  This template will pass through all path parameters\
            \ and selected context information through to the integration endpoint\
            \ via the body/payload. The message content is also included.\n#set($allParams\
            \ = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\"\
            \ : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\
            \"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\"\
            \ : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n\
            \    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" :\
            \ {\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\"\
            ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
            $context.stage\",\n    \"request-id\" : \"$context.requestId\",\n    \"\
            resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
            \n    }\n}\n"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:506666621600:function:${stageVariables.LambdaFunctionName}/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
definitions:
  Empty:
    type: object
    title: "empty schema"
  avg:
    type: array
    items:
      $ref: '#/definitions/avgArray'
  avgArray:
    type: object
    properties:
      region:
        type: string
      averages:
        type: array
        items:
          $ref: '#/definitions/individualAvg'    
  individualAvg:
    type: object
    properties:
      regionTo:
        type: string
      average:
        type: number
        format: float      
  errorModel:
    type: object
    required:
      - errorType
      - message
    properties:
      errorType:
        type: string
      errorCode:
        type: integer
        format: int32
      message:
        type: string
      httpCode:
        type: integer
        format: int32
  queryModel:
    type: object
    required:
      - regionFrom
      - regionTo
      - condOpr
      - daysAgo
      - weeksAgo
    properties:
      regionFrom:
        type: string
      regionTo:
        type: string
      condOpr:
        type: string
      daysAgo:
        type: integer
        format: int32
      weeksAgo:
        type: integer
        format: int32
  queryResponseModel:
    type: object
    properties:
      regionFrom:
        type: string
      regionTo:
        type: string
      averages:
        type: array
        items:
          $ref: '#/definitions/queryResponseAvgModel'
  queryResponseAvgModel:
    type: object
    properties:
      timestamp:
        type: string
      average:
        type: number
        format: float
